#!/bin/sh

#-- From Git template
if git rev-parse --verify HEAD >/dev/null 2>&1
then
    against=HEAD
else
    # Initial commit: diff against an empty tree object
    against=4b825dc642cb6eb9a060e54bf8d69288fbee4904
fi
#--


# Config
PROJECT=$(php -r "echo dirname(dirname(dirname(realpath('$0'))));")
STAGED_FILES_CMD=$(git diff --cached --name-only --diff-filter=ACMR $against --)

PHPCS_BIN=./bin/phpcs
PHPCS_CODING_STANDARD=PSR2
PHPCS_ENCODING=utf-8
PHPCS_FILE_PATTERN="\.(php|phtml)$"
ERROR_MSG="Commit aborted. Please fix the error first."

if test -n "$(tput colors)" && test $(tput colors) -ge 8; then
    ERROR_MSG="$(tput setab 1)$ERROR_MSG$(tput sgr0)"
fi


# Determine if a file list is passed
if [ "$#" -eq 1 ]
then
    oIFS=$IFS
    IFS='
    '
    SFILES="$1"
    IFS=$oIFS
fi
FILES=${SFILES:-$STAGED_FILES_CMD}

#-- From Git template
# If you want to allow non-ASCII filenames set this variable to true.
allownonascii=$(git config --bool hooks.allownonascii)

# Redirect output to stderr.
#exec 1>&2

# Cross platform projects tend to avoid non-ASCII filenames; prevent
# them from being added to the repository. We exploit the fact that the
# printable range starts at the space character and ends with tilde.
if [ "$allownonascii" != "true" ] &&
# Note that the use of brackets around a tr range is ok here, (it's
# even required, for portability to Solaris 10's /usr/bin/tr), since
# the square bracket bytes happen to fall in the designated range.
test "$(git diff --cached --name-only --diff-filter=A -z $against | LC_ALL=C tr -d '[ -~]\0' | wc -c)" != 0
then
    cat <<\EOF
Error: Attempt to add a non-ASCII file name.

This can cause problems if you want to work with people on other platforms.

To be portable it is advisable to rename the file.

If you know what you are doing you can disable this check using:

  git config hooks.allownonascii true
EOF
        exit 1
fi
#--


# Retrive all PHP files
FILES_TO_CHECK=""
for FILE in $FILES
do
    echo "$FILE" | egrep -q "$PHPCS_FILE_PATTERN"
    RETVAL=$?
    if [ "$RETVAL" -eq "0" ]
    then
        FILES_TO_CHECK="$FILES_TO_CHECK $FILE"
    fi
done

if [ "$FILES_TO_CHECK" != "" ]
then
    # Run PHP Lint on all PHP files
    echo "Running PHP Lint..."
    for FILE in $FILES_TO_CHECK
    do
        php -l -d display_errors=0 "$PROJECT/$FILE"
        if [ $? != 0 ]
        then
        echo -e "$RED_FOREGROUND"
            echo $ERROR_MSG
            exit 1
        fi
    done

    if [ "$FILES_TO_CHECK" != "" ]
    then

        # Run PHPCS on all valid PHP files
        echo "\nRunning PHP Code Sniffer..."
        $PHPCS_BIN --standard=$PHPCS_CODING_STANDARD --encoding=$PHPCS_ENCODING -p $FILES_TO_CHECK
        if [ $? != 0 ]
        then
            echo "$ERROR_MSG"
            exit 1
        fi
    fi
fi


# If there are whitespace errors, print the offending file names and fail.
exec git diff-index --check --cached $against --
